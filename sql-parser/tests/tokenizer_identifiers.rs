// THIS IS AN AUTOGENERATED TESTS, DO NOT MODIFY!
//
// The cargo dbcheck will generate the test files for each stage of the course.
// Be careful; these files are not intended to be edited by students. You're
// free to add more tests in separate files, but don't delete or edit tests
// generated by the testing tool

/* --------------- TESTS DERIVED FROM TOKENIZER SPECIFICATION ---------------
 *             (see https://www.sqlite.org/draft/tokenreq.html)
 */
#![allow(non_snake_case)]

mod common;
use common::{run_rainy_day_test, run_sunny_day_test};
use sql_parser::{Keyword, ParsingError, TokenType};
use Keyword::*;

/// H41130: SQLite shall recognize as an ID token any sequence of characters
/// that begins with an ALPHABETIC character and continues with zero or more
/// ALPHANUMERIC characters and/or "$" (u0024) characters and which is not a
/// keyword token.
#[test]
fn test_H41130() {
    let valid_test_cases = vec![
        (
            "SELECT myColumn FROM myTable WHERE myColumn = 123;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("myColumn"),
                TokenType::Keyword(From),
                TokenType::Id("myTable"),
                TokenType::Keyword(Where),
                TokenType::Id("myColumn"),
                TokenType::Equals,
                TokenType::Integer("123"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT col$ FROM table$ WHERE col$ = 456;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("col$"),
                TokenType::Keyword(From),
                TokenType::Id("table$"),
                TokenType::Keyword(Where),
                TokenType::Id("col$"),
                TokenType::Equals,
                TokenType::Integer("456"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO data VALUES (myVar1, myVar2$);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("data"),
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Id("myVar1"),
                TokenType::Comma,
                TokenType::Id("myVar2$"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE users SET myColumn$1 = 789 WHERE id = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("users"),
                TokenType::Keyword(Set),
                TokenType::Id("myColumn$1"),
                TokenType::Equals,
                TokenType::Integer("789"),
                TokenType::Keyword(Where),
                TokenType::Id("id"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

/// H41140: SQLite shall recognize as an ID token any sequence of non-zero
/// characters that begins  with "[" (u005b) and continuing through the
/// first "]" (u005d) character.
#[test]
fn test_H41140() {
    let valid_test_cases = vec![
        (
            "SELECT [column] FROM [table] WHERE [column] = 123;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("[column]"),
                TokenType::Keyword(From),
                TokenType::Id("[table]"),
                TokenType::Keyword(Where),
                TokenType::Id("[column]"),
                TokenType::Equals,
                TokenType::Integer("123"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT [col$umn] FROM [tab$le] WHERE [col$umn] = 456;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("[col$umn]"),
                TokenType::Keyword(From),
                TokenType::Id("[tab$le]"),
                TokenType::Keyword(Where),
                TokenType::Id("[col$umn]"),
                TokenType::Equals,
                TokenType::Integer("456"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO [data] VALUES ([myVar1], [myVar2]);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("[data]"),
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Id("[myVar1]"),
                TokenType::Comma,
                TokenType::Id("[myVar2]"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE [users] SET [myColumn] = 789 WHERE [id] = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("[users]"),
                TokenType::Keyword(Set),
                TokenType::Id("[myColumn]"),
                TokenType::Equals,
                TokenType::Integer("789"),
                TokenType::Keyword(Where),
                TokenType::Id("[id]"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT [column][extra] FROM table1;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("[column]"),
                TokenType::Id("[extra]"),
                TokenType::Keyword(From),
                TokenType::Id("table1"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41140_rainy_day() {
    let invalid_test_cases = vec![
        (
            "SELECT [column FROM table;",
            vec![TokenType::Keyword(Select)],
            ParsingError::UnexpectedEOF,
        ),
        (
            "SELECT column] FROM table;",
            vec![TokenType::Keyword(Select), TokenType::Keyword(Column)],
            ParsingError::UnrecognizedToken,
        ),
        (
            "SELECT [] FROM table;",
            vec![TokenType::Keyword(Select)],
            ParsingError::EmptyId,
        ),
    ];

    for (sql, expected_tokens, expected_error) in invalid_test_cases {
        run_rainy_day_test(sql, expected_tokens, expected_error);
    }
}

/// H41150: SQLite shall recognize as an ID token any sequence of characters
/// that begins with a double-quote (u0022), is followed by zero or more
/// non-zero characters and/or pairs of double-quotes (u0022) and terminates
/// with a double-quote (u0022) that is not part of a pair.
#[test]
fn test_H41150() {
    let valid_test_cases = vec![
        (
            "SELECT \"column\" FROM \"table\" WHERE \"column\" = 123;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("\"column\""),
                TokenType::Keyword(From),
                TokenType::Id("\"table\""),
                TokenType::Keyword(Where),
                TokenType::Id("\"column\""),
                TokenType::Equals,
                TokenType::Integer("123"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT \"col\"\"umn\" FROM \"tab\"\"le\" WHERE \"col\"\"umn\" = 456;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("\"col\"\"umn\""),
                TokenType::Keyword(From),
                TokenType::Id("\"tab\"\"le\""),
                TokenType::Keyword(Where),
                TokenType::Id("\"col\"\"umn\""),
                TokenType::Equals,
                TokenType::Integer("456"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO \"data\" VALUES (\"myVar\", \"myVar\"\"2\");",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("\"data\""),
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Id("\"myVar\""),
                TokenType::Comma,
                TokenType::Id("\"myVar\"\"2\""),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE \"users\" SET \"myColumn\" = 789 WHERE \"id\" = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("\"users\""),
                TokenType::Keyword(Set),
                TokenType::Id("\"myColumn\""),
                TokenType::Equals,
                TokenType::Integer("789"),
                TokenType::Keyword(Where),
                TokenType::Id("\"id\""),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT \"\" FROM table1;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("\"\""),
                TokenType::Keyword(From),
                TokenType::Id("table1"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41150_rainy_day() {
    let invalid_test_cases = vec![
        (
            "SELECT \"column FROM table;",
            vec![TokenType::Keyword(Select)],
            ParsingError::UnterminatedLiteral("\"column FROM table;"),
        ),
        (
            "SELECT column\" FROM table;",
            vec![TokenType::Keyword(Select), TokenType::Keyword(Column)],
            ParsingError::UnterminatedLiteral("\" FROM table;"),
        ),
        (
            "SELECT \"col\"umn\" FROM table;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("\"col\""), // Invalid ID with mixed quotes
                TokenType::Id("umn"),
            ],
            ParsingError::UnterminatedLiteral("\" FROM table;"),
        ),
    ];

    for (sql, expected_tokens, expected_error) in invalid_test_cases {
        run_rainy_day_test(sql, expected_tokens, expected_error);
    }
}

/// H41160: SQLite shall recognize as an ID token any sequence of characters
/// that begins with a grave accent (u0060), is followed by zero or more
/// non-zero characters and/or pairs of grave accents (u0060) and terminates
/// with a grave accent (u0060) that is not part of a pair.
#[test]
fn test_H41160() {
    let valid_test_cases = vec![
        (
            "SELECT `column` FROM `table` WHERE `column` = 123;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("`column`"),
                TokenType::Keyword(From),
                TokenType::Id("`table`"),
                TokenType::Keyword(Where),
                TokenType::Id("`column`"),
                TokenType::Equals,
                TokenType::Integer("123"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT `col``umn` FROM `tab``le` WHERE `col``umn` = 456;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("`col``umn`"),
                TokenType::Keyword(From),
                TokenType::Id("`tab``le`"),
                TokenType::Keyword(Where),
                TokenType::Id("`col``umn`"),
                TokenType::Equals,
                TokenType::Integer("456"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO `data` VALUES (`myVar`, `myVar``2`);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("`data`"),
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Id("`myVar`"),
                TokenType::Comma,
                TokenType::Id("`myVar``2`"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE `users` SET `myColumn` = 789 WHERE `id` = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("`users`"),
                TokenType::Keyword(Set),
                TokenType::Id("`myColumn`"),
                TokenType::Equals,
                TokenType::Integer("789"),
                TokenType::Keyword(Where),
                TokenType::Id("`id`"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "SELECT `` FROM table1;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("``"),
                TokenType::Keyword(From),
                TokenType::Id("table1"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41160_rainy_day() {
    let invalid_test_cases = vec![
        (
            "SELECT `column FROM table;",
            vec![TokenType::Keyword(Select)],
            ParsingError::UnexpectedEOF,
        ),
        (
            "SELECT column` FROM table;",
            vec![TokenType::Keyword(Select), TokenType::Keyword(Column)],
            ParsingError::UnexpectedEOF,
        ),
        (
            "SELECT `col`umn` FROM table;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Id("`col`"),
                TokenType::Id("umn"),
            ],
            ParsingError::UnexpectedEOF,
        ),
    ];

    for (sql, expected_tokens, expected_error) in invalid_test_cases {
        run_rainy_day_test(sql, expected_tokens, expected_error);
    }
}
