// THIS IS AN AUTOGENERATED TESTS, DO NOT MODIFY!
//
// The cargo dbcheck will generate the test files for each stage of the course.
// Be careful; these files are not intended to be edited by students. You're
// free to add more tests in separate files, but don't delete or edit tests
// generated by the testing tool

/* --------------- TESTS CREATED FROM TOKENIZER SPECIFICATION ---------------
 *             (see https://www.sqlite.org/draft/tokenreq.html)
 */
#![allow(non_snake_case)]

use super::{run_rainy_day_test, run_sunny_day_test};
use db_academy_sql_parser::{Keyword::*, TokenType, TokenizerError};

/// H41220: SQLite shall recognize as an INTEGER token any sequence of one or
/// more NUMERIC characters.
#[test]
fn test_H41220() {
    let valid_test_cases = vec![
        (
            "SELECT * FROM users WHERE age = 25;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Star,
                TokenType::Keyword(From),
                TokenType::Id("users"),
                TokenType::Keyword(Where),
                TokenType::Id("age"),
                TokenType::Equals,
                TokenType::Integer("25"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO users (id, age) VALUES (1, 30);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("users"),
                TokenType::LeftParen,
                TokenType::Id("id"),
                TokenType::Comma,
                TokenType::Id("age"),
                TokenType::RightParen,
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Integer("1"),
                TokenType::Comma,
                TokenType::Integer("30"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE users SET age = 45 WHERE id = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("users"),
                TokenType::Keyword(Set),
                TokenType::Id("age"),
                TokenType::Equals,
                TokenType::Integer("45"),
                TokenType::Keyword(Where),
                TokenType::Id("id"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "DELETE FROM users WHERE id = 123456;",
            vec![
                TokenType::Keyword(Delete),
                TokenType::Keyword(From),
                TokenType::Id("users"),
                TokenType::Keyword(Where),
                TokenType::Id("id"),
                TokenType::Equals,
                TokenType::Integer("123456"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41220_rainy_day() {
    run_rainy_day_test("12abc", vec![], TokenizerError::BadNumber);
}

/// H41230: SQLite shall recognize as a FLOAT token a sequence of one or more
/// NUMERIC characters together with zero or one period (u002e) and followed
/// by an exponentiation suffix.
#[test]
fn test_H41230() {
    let valid_test_cases = vec![
        (
            "SELECT * FROM measurements WHERE value = 3.14e10;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Star,
                TokenType::Keyword(From),
                TokenType::Id("measurements"),
                TokenType::Keyword(Where),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("3.14e10"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO measurements (id, value) VALUES (1, 2e3);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("measurements"),
                TokenType::LeftParen,
                TokenType::Id("id"),
                TokenType::Comma,
                TokenType::Id("value"),
                TokenType::RightParen,
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Integer("1"),
                TokenType::Comma,
                TokenType::Float("2e3"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE measurements SET value = 6.022e23 WHERE id = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("measurements"),
                TokenType::Keyword(Set),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("6.022e23"),
                TokenType::Keyword(Where),
                TokenType::Id("id"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "DELETE FROM measurements WHERE value = 9e-5;",
            vec![
                TokenType::Keyword(Delete),
                TokenType::Keyword(From),
                TokenType::Id("measurements"),
                TokenType::Keyword(Where),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("9e-5"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41230_rainy_day() {
    let invalid_test_cases = vec![
        ("3.14.15e10;", vec![], TokenizerError::BadNumber),
        (
            "3.14e", // Missing exponent value
            vec![],
            TokenizerError::BadNumber,
        ),
        (
            "2e", // Missing exponent value
            vec![],
            TokenizerError::BadNumber,
        ),
        (
            "2.0f3", // Invalid exponent notation
            vec![],
            TokenizerError::BadNumber,
        ),
    ];

    for (sql, expected_tokens, expected_error) in invalid_test_cases {
        run_rainy_day_test(sql, expected_tokens, expected_error);
    }
}

/// H41240: SQLite shall recognize as a FLOAT token a sequence of one or more
/// NUMERIC characters that includes exactly one period (u002e) character.
#[test]
fn test_H41240() {
    let valid_test_cases = vec![
        (
            "SELECT * FROM measurements WHERE value = 3.14;",
            vec![
                TokenType::Keyword(Select),
                TokenType::Star,
                TokenType::Keyword(From),
                TokenType::Id("measurements"),
                TokenType::Keyword(Where),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("3.14"),
                TokenType::Semi,
            ],
        ),
        (
            "INSERT INTO measurements (id, value) VALUES (1, 0.5);",
            vec![
                TokenType::Keyword(Insert),
                TokenType::Keyword(Into),
                TokenType::Id("measurements"),
                TokenType::LeftParen,
                TokenType::Id("id"),
                TokenType::Comma,
                TokenType::Id("value"),
                TokenType::RightParen,
                TokenType::Keyword(Values),
                TokenType::LeftParen,
                TokenType::Integer("1"),
                TokenType::Comma,
                TokenType::Float("0.5"),
                TokenType::RightParen,
                TokenType::Semi,
            ],
        ),
        (
            "UPDATE measurements SET value = 123.456 WHERE id = 2;",
            vec![
                TokenType::Keyword(Update),
                TokenType::Id("measurements"),
                TokenType::Keyword(Set),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("123.456"),
                TokenType::Keyword(Where),
                TokenType::Id("id"),
                TokenType::Equals,
                TokenType::Integer("2"),
                TokenType::Semi,
            ],
        ),
        (
            "DELETE FROM measurements WHERE value = 0.001;",
            vec![
                TokenType::Keyword(Delete),
                TokenType::Keyword(From),
                TokenType::Id("measurements"),
                TokenType::Keyword(Where),
                TokenType::Id("value"),
                TokenType::Equals,
                TokenType::Float("0.001"),
                TokenType::Semi,
            ],
        ),
    ];

    for (sql, expected_tokens) in valid_test_cases {
        run_sunny_day_test(sql, expected_tokens);
    }
}

#[test]
fn test_H41240_rainy_day() {
    let invalid_test_cases = vec![
        (
            "3.14.15 ", // Multiple periods
            vec![],
            TokenizerError::BadNumber,
        ),
        (
            "123.", // Period with no digits after
            vec![],
            TokenizerError::BadNumber,
        ),
        // (
        //     ".456",// Period with no digits before
        //     vec![],
        //     ParsingError::BadNumber,
        // ),
    ];

    for (sql, expected_tokens, expected_error) in invalid_test_cases {
        run_rainy_day_test(sql, expected_tokens, expected_error);
    }
}
